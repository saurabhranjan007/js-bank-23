* DESTRCUTURE ARR WITH DEFAULT VALUE
    const arr = ['Saurabh', 'saurabh@mail.com', 'Ranjan']
    const [name='', email=''] = arr 
    const [firstName='', , lastName=''] = arr 

* DESTRCUTURE OBJ WITH DEFAULT VALUE
    const menu = {
        starter: 'Dry Chicken',
        drinks: 'Whisky',
        desert: 'Gulab Jamun'
    }
    const { starter:'', drinks:'' } = menu

* SPREAD OPERATOR 
    >> spread operators are used to spread the values of the array, to create new arrays by using the 
       spread sign on right side of the assignment
    >> spread operators can also be used with Objects 
    >> spread operators can also be used with function parameters 

    const arr = [1, 2, 3, 4]
    const newArr = [8, 9, ...arr]  // after initialized values spread the values of arr  
    const anotherArr = [...arr, 10, 11] // spread the values of array and then add the initialized values

    with functions (⬇️)
    const add = (...parameters) => {
        let sum = 0 
        for (i=0, i<parameters.length; i++) {
            sum+=numbers[i]
        }
    }
    const x = [2, 4, 5, 7, 8, 1, 3, 9]
    add(...x)

* REST OPERATOR 
    >> rest operators are used to pack the values of an array to some specific array using the spread sign on 
       left side of assignment
    >> rest operators can also be used with the Objects

    const arr1 = [1, 2, ...[5, 6, 7]] // spread OPERATOR (since we're spreading on right side of assignment)
    const [a, b, ...others] = [1, 2, 4, 5, 8, 7, 3] // REST OPERATOR - since we're spreading on the left of assignment

* NULLISH COALESCING OPERATORS 
    >> NULLISH operators - works on the idea of null or undefined so if the first parameter is not null or undefined
       then the value will get assigned unlike (&& and ||) operators. Where (||) operator check for a flasy value 
       and (&&) operator checks for a truthy value. 

    const number = param.num ?? 10; // is param.num exist then number equals to that otherwise it equals to 10 

* FOR-OF ITERABLES (LOOP)
    const menu = ['item1', 'item2', 'item3', 'item4', 'item5']

    for (const menu_item of menu) {
        console.log(`item: ${menu_item}`)
    }

    Output: ⬇️ 
    item: item1
    item: item2 and so on..

    >> the above iteration only returns the values and not index-value pair, to get that use .entries()

    for (const menu_item of menu.entries()) {
        console.log(menu_item)
    }

    Output: ⬇️ 
    [0, "item1"],
    [1, "item2"] and so on..

* MAP DATASTRUCTURE 
    In MAP data is stored in a key-value pair like Objects but unlike Objects the key in a MAP could be of any type

    const mapExample = new Map()

    mapExample.set(1, 'Name')
    mapExample.set('hello', "Good Morning")
    mapExample([0, 1], 'anArray')